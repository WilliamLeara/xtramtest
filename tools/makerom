#!/usr/bin/env perl
# for 8K ROM
# calculate the checksum and set the last byte to make the sum 0
# place at the end of a 32K ROM image
# use 2 copies end to end to make a 64K image for using 27512 in 27256 socket

use strict;
use bytes;

my $insize = 8*1024;
my $copies = 4;

my %BIN;

sub getbin {
	my ( $fn ) = @_;
	return $BIN{$fn} if $BIN{$fn};

	open my $fh, "<", $fn or die "$fn: $!\n";
	binmode $fh;
	my $bytes;
	$/ = undef;
	$bytes = <$fh>;
	close $fh;

	my $count = length( $bytes );
	die "file is the wrong size: $count != $insize\n" unless $count == $insize;

	my $lastbyte = ord( substr( $bytes, -1 ) );
	my $sum = unpack( "%8C*", $bytes );
	my $diff = ( 0x100 - $sum ) & 0xFF;
	my $newlastbyte = ( $lastbyte + $diff ) % 0xFF;

	substr( $bytes, -1, 1, chr( ( $lastbyte + $diff ) % 0xFF ) );

	$BIN{$fn} = $bytes;
	return $bytes;
}


sub write_rom {
	my ( $fn ) = @_;

	$fn =~ m/^(.*?)[.](\d+)[kK]$/ or die "bad filename: $fn\n";
	my ( $base, $size ) = ( $1, $2 );

	my $bytes = getbin( "$base.bin" );

	open my $fh, ">", $fn or die "$fn: $!\n";
	binmode $fh;

	if ( $size == $insize / 1024 ) {
		print $fh $bytes;
	} elsif ( $size == 16 or $size == 32 ) {
		my $blanks = int( $size*1024 / $insize - 1 );
		print $fh "\xFF" x ( $insize * $blanks );
		print $fh $bytes;
	} elsif ( $size == 64 ) {
		print $fh "\xFF" x ( $insize * 3 );
		print $fh $bytes;
		print $fh "\xFF" x ( $insize * 3 );
		print $fh $bytes;
	} else {
		die "bad size: $size\n";
	}

	close $fh;
}

my $TARGET = $ENV{TARGET} // "xtramtest";
@ARGV = ( "$TARGET.8k", "$TARGET.32k", "$TARGET.64k" )
	unless @ARGV;

for my $fn ( @ARGV ) {
	write_rom( $fn );
}
